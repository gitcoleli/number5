version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  kubernetes: circleci/kubernetes@0.11.2

    
jobs:

# ##########################Building Section #################################################################################################

  build-app:
    build:
    docker:
      - image: python:3.9-alpine
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
                    at: ~/
      - run:
                name: Install dependencies
                command: |
                        pip install -r requirements.txt
                        pip list
                        ls

#######################################linting the Application##################################################################################

  lint-app:
    build:
    docker:
      - image: python:3.9-alpine
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
                    at: ~/
      - run:
                name: Install dependencies
                command: |
                        pip install -r requirements.txt
                        pip list
      - run:
                name: lint app
                command: |
                        pylint --disable=R,C,W1203 app.py                                                

###############################################vulnerability Scanning the alplication ###############################################################

  scan-app:
    build:
    docker:
      - image: python:3.9-alpine
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
                    at: ~/
      - run:
                name: Install dependencies
                command: |
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        safety check

################################################ EKS ########################################################

  eksfun:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            apt-get update -qq -y
            apt-get install -qq -y
            apt-get -y install sudo
            apt-get update && DEBIAN_FRONTEND="noninteractive" TZ="America/New_York" apt-get install -y tzdata
            sudo apt-get install apt-transport-https ca-certificates curl gnupg -y
            sudo apt-get install awscli -y
            sudo apt-get update
            pwd
            aws eks --region us-west-2 update-kubeconfig --name udc-k8s


      - run:
                name: install eksctl
                command: |
                  curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                  sudo mv /tmp/eksctl /usr/local/bin


      - run:
                name: install kubectl
                command: |
                  curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
                  chmod +x ./kubectl
                  mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin


      - run:
                name: build and verify eks cluster
                command: |
                  touch clustername.txt
                  eksctl get cluster -o yaml  >> clustername.txt
                  cluster=$(grep -i udc-k8s clustername.txt | wc -l)
                  if [[ $cluster -gt 0 ]]
                      then 
                      echo "cluster exists"
                      else
                      echo "Cant find kube cluster, creating..."
                      eksctl create cluster --name udc-k8s --region=us-west-2 --ssh-public-key=udacity --nodes=4 --node-type=m5.large
                  fi


# create-update:
#     docker:
#       - image: 'cimg/base:stable'
#     steps:
#       - checkout
#       - kubernetes/install-kubectl
#       - kubernetes/create-or-update-resource:
#           get-rollout-status: true
#           resource-file-path: k8s/deployment.yaml
#           resource-name: deployment
#           show-kubectl-command: true

  deploy-image:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - kubernetes/install-kubectl:
          kubectl-version: v1.20.4
      - run:
          name: oh lets see
          command: |
            apt-get update -qq -y
            apt-get install -qq -y
            apt-get -y install sudo
            apt-get update && DEBIAN_FRONTEND="noninteractive" TZ="America/New_York" apt-get install -y tzdata
            sudo apt-get install apt-transport-https ca-certificates curl gnupg -y
            sudo apt-get install awscli -y
            # aws eks --region us-west-2 update-kubeconfig --name udc-k8s
            # kubectl version
            # kubectl get svc






  deployfun:
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            apt-get update -qq -y
            apt-get install -qq -y
            apt-get -y install sudo
            apt-get update && DEBIAN_FRONTEND="noninteractive" TZ="America/New_York" apt-get install -y tzdata
            sudo apt-get install apt-transport-https ca-certificates curl gnupg -y
            sudo apt-get install awscli -y
            sudo apt-get update
            pwd
            aws eks --region us-west-2 update-kubeconfig --name udc-k8s


      - run:
                name: install kubectl
                command: |
                  curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
                  chmod +x ./kubectl
                  mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin


      - run:
                name: deploy app
                command: |
                  kubectl apply -f k8s/deployment.yml
                  kubectl apply -f k8s/service.yml




workflows:
  default:
    jobs:
      # - build-app
      # - lint-app:
      #     requires: [build-app]
      # - scan-app:
      #     requires: [lint-app]
      # - eksfun:
      #     requires: [aws-ecr/build-and-push-image]
        - deploy-image
      # - aws-ecr/build-and-push-image:
      #     setup-remote-docker: false
      #     repo: number5
      #     tag: "${CIRCLE_BUILD_NUM}"
      #     dockerfile: Dockerfile
      #     path: .
      #     requires: [scan-app]

################################