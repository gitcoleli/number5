version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  kubernetes: circleci/kubernetes@0.11.2
  aws-eks: circleci/aws-eks@0.2.3


    
jobs:

# ##########################Building Section #################################################################################################

  linting:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name : run lint
          command: |
            . venv/bin/activate
            make lint
            pylint --disable=R,C,W1203 app.py 


###############################################vulnerability Scanning the alplication ###############################################################

  vulnerability-scan-app:
    build:
    docker:
      - image: python:3.9-alpine
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
                    at: ~/
      - run:
                name: Scanning Application & Dependencies
                command: |
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        safety check

################################################ EKS BUILD ########################################################
  cluster-verification:
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          name: Install update
          command: |
            apt-get -y -qq update


      - run:
          name: Install sudo
          command: |
            apt-get -y install sudo

      - run:
          name: Install apps needed for build
          command: |
            sudo apt-get -y install curl gnupg2 software-properties-common unzip less git dos2unix




      - run:
          name: Install eks
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp            # https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version

      - run:
          name: verify eks cluster
          command: |
            touch clustername.txt
            eksctl get cluster -o yaml  >> clustername.txt
            cluster=$(grep -i udc-k8s clustername.txt | wc -l)
            if [[ $cluster -gt 0 ]]
                then 
                echo "cluster udc-k8s exists"
                else
                echo "Cant find udc-k8s cluster, creating..."
                eksctl create cluster --name udc-k8s --region=us-west-2 --ssh-public-key=udacity --nodes=4 --node-type=m5.large
            fi

################################################ EKS DEPLOY ########################################################

  image-deploy:
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          name: update and install dependencies
          command: |
            apt-get -y -qq update
            apt-get -y install sudo
            sudo apt-get -y install curl unzip 

      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version

      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"        #https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - run:
          name: update deployment file with tag
          command: |
            chmod 755 update.sh
            ./update.sh
            cat deployment2.yml

      - run:
          name: connect image to EKS
          command: |
            aws eks --region us-west-2 update-kubeconfig --name udc-k8s

      - run:
          name: Deploy MicroService Python Flask Application
          command: |
            kubectl apply -f deployment2.yml
            kubectl apply -f k8s/service.yml
            kubectl get pods
            kubectl get svc | grep -i loadbalancer | awk  '{ print $4 }'

      - run:
          name: test site
          command: |
            chmod 755 update.sh
            ./sitetest.sh


workflows:
  default:
    jobs:
      - linting
      - vulnerability-scan-app:
          requires: [linting]
      - cluster-verification:
          requires: [aws-ecr/build-and-push-image]
      - image-deploy:
          requires: [cluster-verification]
      - aws-ecr/build-and-push-image:
          setup-remote-docker: false
          repo: number5
          tag: "v0.1.${CIRCLE_WORKFLOW_ID:0:8}"
          dockerfile: Dockerfile
          path: .
          requires: [vulnerability-scan-app]

################################